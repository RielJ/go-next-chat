// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: conversation.sql

package db

import (
	"context"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversation (
  name
) VALUES (
  $1
) RETURNING id, name, created_at
`

func (q *Queries) CreateConversation(ctx context.Context, name string) (Conversation, error) {
	row := q.db.QueryRow(ctx, createConversation, name)
	var i Conversation
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getConversation = `-- name: GetConversation :one
SELECT id, name, created_at FROM conversation
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetConversation(ctx context.Context, id int64) (Conversation, error) {
	row := q.db.QueryRow(ctx, getConversation, id)
	var i Conversation
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getUserConversations = `-- name: GetUserConversations :many
SELECT id, name, created_at FROM conversation
WHERE id IN (
  SELECT conversation_id FROM conversation_users
  WHERE user_id = $1
)
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetUserConversationsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUserConversations(ctx context.Context, arg GetUserConversationsParams) ([]Conversation, error) {
	rows, err := q.db.Query(ctx, getUserConversations, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConversation = `-- name: UpdateConversation :one
UPDATE conversation SET
  name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateConversationParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateConversation(ctx context.Context, arg UpdateConversationParams) (Conversation, error) {
	row := q.db.QueryRow(ctx, updateConversation, arg.ID, arg.Name)
	var i Conversation
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: conversation_user.sql

package db

import (
	"context"
)

const createConversationUser = `-- name: CreateConversationUser :one
INSERT INTO conversation_users (
  conversation_id,
  user_id
) VALUES (
  $1, $2
) RETURNING id, conversation_id, user_id, created_at
`

type CreateConversationUserParams struct {
	ConversationID int64 `json:"conversation_id"`
	UserID         int64 `json:"user_id"`
}

func (q *Queries) CreateConversationUser(ctx context.Context, arg CreateConversationUserParams) (ConversationUser, error) {
	row := q.db.QueryRow(ctx, createConversationUser, arg.ConversationID, arg.UserID)
	var i ConversationUser
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteConversationUser = `-- name: DeleteConversationUser :one
DELETE FROM conversation_users
WHERE user_id = $1
AND conversation_id = $2
RETURNING id, conversation_id, user_id, created_at
`

type DeleteConversationUserParams struct {
	UserID         int64 `json:"user_id"`
	ConversationID int64 `json:"conversation_id"`
}

func (q *Queries) DeleteConversationUser(ctx context.Context, arg DeleteConversationUserParams) (ConversationUser, error) {
	row := q.db.QueryRow(ctx, deleteConversationUser, arg.UserID, arg.ConversationID)
	var i ConversationUser
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getConversationUser = `-- name: GetConversationUser :one
SELECT id, conversation_id, user_id, created_at FROM conversation_users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetConversationUser(ctx context.Context, id int64) (ConversationUser, error) {
	row := q.db.QueryRow(ctx, getConversationUser, id)
	var i ConversationUser
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getConversationUsers = `-- name: GetConversationUsers :many
SELECT id, conversation_id, user_id, created_at FROM conversation_users
WHERE conversation_id = $1
`

func (q *Queries) GetConversationUsers(ctx context.Context, conversationID int64) ([]ConversationUser, error) {
	rows, err := q.db.Query(ctx, getConversationUsers, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ConversationUser{}
	for rows.Next() {
		var i ConversationUser
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

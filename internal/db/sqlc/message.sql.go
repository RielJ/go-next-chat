// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: message.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO message (
  user_id,
  message,
  conversation_id
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, message, created_at, conversation_id
`

type CreateMessageParams struct {
	UserID         int64  `json:"user_id"`
	Message        string `json:"message"`
	ConversationID int64  `json:"conversation_id"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.UserID, arg.Message, arg.ConversationID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.CreatedAt,
		&i.ConversationID,
	)
	return i, err
}

const getConversationMessages = `-- name: GetConversationMessages :many
SELECT id, user_id, message, created_at, conversation_id FROM message
WHERE conversation_id = $1
AND user_id = $2
ORDER BY created_at DESC
LIMIT $3
OFFSET $4
`

type GetConversationMessagesParams struct {
	ConversationID int64 `json:"conversation_id"`
	UserID         int64 `json:"user_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) GetConversationMessages(ctx context.Context, arg GetConversationMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getConversationMessages,
		arg.ConversationID,
		arg.UserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.CreatedAt,
			&i.ConversationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessage = `-- name: GetMessage :one
SELECT id, user_id, message, created_at, conversation_id FROM message
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.CreatedAt,
		&i.ConversationID,
	)
	return i, err
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE message
SET
  message = COALESCE($1, message)
WHERE
  id = $2
RETURNING id, user_id, message, created_at, conversation_id
`

type UpdateMessageParams struct {
	Message pgtype.Text `json:"message"`
	ID      int64       `json:"id"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, updateMessage, arg.Message, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.CreatedAt,
		&i.ConversationID,
	)
	return i, err
}

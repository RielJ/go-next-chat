// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rielj/go-next-chat/internal/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen --destination internal/mock/store.go github.com/rielj/go-next-chat/internal/db/sqlc Store
//

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/rielj/go-next-chat/internal/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateConversation mocks base method.
func (m *MockStore) CreateConversation(arg0 context.Context, arg1 string) (db.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConversation", arg0, arg1)
	ret0, _ := ret[0].(db.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversation indicates an expected call of CreateConversation.
func (mr *MockStoreMockRecorder) CreateConversation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversation", reflect.TypeOf((*MockStore)(nil).CreateConversation), arg0, arg1)
}

// CreateConversationUser mocks base method.
func (m *MockStore) CreateConversationUser(arg0 context.Context, arg1 db.CreateConversationUserParams) (db.ConversationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConversationUser", arg0, arg1)
	ret0, _ := ret[0].(db.ConversationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversationUser indicates an expected call of CreateConversationUser.
func (mr *MockStoreMockRecorder) CreateConversationUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversationUser", reflect.TypeOf((*MockStore)(nil).CreateConversationUser), arg0, arg1)
}

// CreateMessage mocks base method.
func (m *MockStore) CreateMessage(arg0 context.Context, arg1 db.CreateMessageParams) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockStoreMockRecorder) CreateMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockStore)(nil).CreateMessage), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), arg0, arg1)
}

// DeleteConversationUser mocks base method.
func (m *MockStore) DeleteConversationUser(arg0 context.Context, arg1 db.DeleteConversationUserParams) (db.ConversationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConversationUser", arg0, arg1)
	ret0, _ := ret[0].(db.ConversationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConversationUser indicates an expected call of DeleteConversationUser.
func (mr *MockStoreMockRecorder) DeleteConversationUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConversationUser", reflect.TypeOf((*MockStore)(nil).DeleteConversationUser), arg0, arg1)
}

// GetConversation mocks base method.
func (m *MockStore) GetConversation(arg0 context.Context, arg1 int64) (db.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversation", arg0, arg1)
	ret0, _ := ret[0].(db.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversation indicates an expected call of GetConversation.
func (mr *MockStoreMockRecorder) GetConversation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversation", reflect.TypeOf((*MockStore)(nil).GetConversation), arg0, arg1)
}

// GetConversationMessages mocks base method.
func (m *MockStore) GetConversationMessages(arg0 context.Context, arg1 db.GetConversationMessagesParams) ([]db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationMessages indicates an expected call of GetConversationMessages.
func (mr *MockStoreMockRecorder) GetConversationMessages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationMessages", reflect.TypeOf((*MockStore)(nil).GetConversationMessages), arg0, arg1)
}

// GetConversationUser mocks base method.
func (m *MockStore) GetConversationUser(arg0 context.Context, arg1 int64) (db.ConversationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationUser", arg0, arg1)
	ret0, _ := ret[0].(db.ConversationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationUser indicates an expected call of GetConversationUser.
func (mr *MockStoreMockRecorder) GetConversationUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationUser", reflect.TypeOf((*MockStore)(nil).GetConversationUser), arg0, arg1)
}

// GetConversationUsers mocks base method.
func (m *MockStore) GetConversationUsers(arg0 context.Context, arg1 int64) ([]db.ConversationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.ConversationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationUsers indicates an expected call of GetConversationUsers.
func (mr *MockStoreMockRecorder) GetConversationUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationUsers", reflect.TypeOf((*MockStore)(nil).GetConversationUsers), arg0, arg1)
}

// GetMessage mocks base method.
func (m *MockStore) GetMessage(arg0 context.Context, arg1 int64) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockStoreMockRecorder) GetMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockStore)(nil).GetMessage), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserConversations mocks base method.
func (m *MockStore) GetUserConversations(arg0 context.Context, arg1 db.GetUserConversationsParams) ([]db.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConversations", arg0, arg1)
	ret0, _ := ret[0].([]db.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConversations indicates an expected call of GetUserConversations.
func (mr *MockStoreMockRecorder) GetUserConversations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConversations", reflect.TypeOf((*MockStore)(nil).GetUserConversations), arg0, arg1)
}

// UpdateConversation mocks base method.
func (m *MockStore) UpdateConversation(arg0 context.Context, arg1 db.UpdateConversationParams) (db.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConversation", arg0, arg1)
	ret0, _ := ret[0].(db.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConversation indicates an expected call of UpdateConversation.
func (mr *MockStoreMockRecorder) UpdateConversation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConversation", reflect.TypeOf((*MockStore)(nil).UpdateConversation), arg0, arg1)
}

// UpdateMessage mocks base method.
func (m *MockStore) UpdateMessage(arg0 context.Context, arg1 db.UpdateMessageParams) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockStoreMockRecorder) UpdateMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockStore)(nil).UpdateMessage), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStoreMockRecorder) UpdateVerifyEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmail), arg0, arg1)
}
